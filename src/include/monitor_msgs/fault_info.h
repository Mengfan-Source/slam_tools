// Generated by gencpp from file monitor_msgs/fault_info.msg
// DO NOT EDIT!


#ifndef MONITOR_MSGS_MESSAGE_FAULT_INFO_H
#define MONITOR_MSGS_MESSAGE_FAULT_INFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace monitor_msgs
{
template <class ContainerAllocator>
struct fault_info_
{
  typedef fault_info_<ContainerAllocator> Type;

  fault_info_()
    : timestamp_sec(0.0)
    , module_name()
    , sequence_num(0)
    , version(0)
    , error_code(0)
    , fault_level(0)
    , msg()  {
    }
  fault_info_(const ContainerAllocator& _alloc)
    : timestamp_sec(0.0)
    , module_name(_alloc)
    , sequence_num(0)
    , version(0)
    , error_code(0)
    , fault_level(0)
    , msg(_alloc)  {
  (void)_alloc;
    }



   typedef double _timestamp_sec_type;
  _timestamp_sec_type timestamp_sec;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _module_name_type;
  _module_name_type module_name;

   typedef int32_t _sequence_num_type;
  _sequence_num_type sequence_num;

   typedef int32_t _version_type;
  _version_type version;

   typedef int32_t _error_code_type;
  _error_code_type error_code;

   typedef int32_t _fault_level_type;
  _fault_level_type fault_level;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _msg_type;
  _msg_type msg;





  typedef boost::shared_ptr< ::monitor_msgs::fault_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::monitor_msgs::fault_info_<ContainerAllocator> const> ConstPtr;

}; // struct fault_info_

typedef ::monitor_msgs::fault_info_<std::allocator<void> > fault_info;

typedef boost::shared_ptr< ::monitor_msgs::fault_info > fault_infoPtr;
typedef boost::shared_ptr< ::monitor_msgs::fault_info const> fault_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::monitor_msgs::fault_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::monitor_msgs::fault_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::monitor_msgs::fault_info_<ContainerAllocator1> & lhs, const ::monitor_msgs::fault_info_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp_sec == rhs.timestamp_sec &&
    lhs.module_name == rhs.module_name &&
    lhs.sequence_num == rhs.sequence_num &&
    lhs.version == rhs.version &&
    lhs.error_code == rhs.error_code &&
    lhs.fault_level == rhs.fault_level &&
    lhs.msg == rhs.msg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::monitor_msgs::fault_info_<ContainerAllocator1> & lhs, const ::monitor_msgs::fault_info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace monitor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::monitor_msgs::fault_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::monitor_msgs::fault_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::monitor_msgs::fault_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::monitor_msgs::fault_info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::monitor_msgs::fault_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::monitor_msgs::fault_info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::monitor_msgs::fault_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "be53caad19cf8325000fdb2e7c5cd275";
  }

  static const char* value(const ::monitor_msgs::fault_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbe53caad19cf8325ULL;
  static const uint64_t static_value2 = 0x000fdb2e7c5cd275ULL;
};

template<class ContainerAllocator>
struct DataType< ::monitor_msgs::fault_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "monitor_msgs/fault_info";
  }

  static const char* value(const ::monitor_msgs::fault_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::monitor_msgs::fault_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 timestamp_sec   ##故障发生时间\n"
"string  module_name		##故障模块或节点名称\n"
"int32   sequence_num	##消息数\n"
"int32   version			##版本号\n"
"int32   error_code		##故障码\n"
"int32   fault_level		##故障等级\n"
"string  msg				##故障描述\n"
;
  }

  static const char* value(const ::monitor_msgs::fault_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::monitor_msgs::fault_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp_sec);
      stream.next(m.module_name);
      stream.next(m.sequence_num);
      stream.next(m.version);
      stream.next(m.error_code);
      stream.next(m.fault_level);
      stream.next(m.msg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct fault_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::monitor_msgs::fault_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::monitor_msgs::fault_info_<ContainerAllocator>& v)
  {
    s << indent << "timestamp_sec: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp_sec);
    s << indent << "module_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.module_name);
    s << indent << "sequence_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sequence_num);
    s << indent << "version: ";
    Printer<int32_t>::stream(s, indent + "  ", v.version);
    s << indent << "error_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.error_code);
    s << indent << "fault_level: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fault_level);
    s << indent << "msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.msg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MONITOR_MSGS_MESSAGE_FAULT_INFO_H
