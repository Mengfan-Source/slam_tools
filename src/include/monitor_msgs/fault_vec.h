// Generated by gencpp from file monitor_msgs/fault_vec.msg
// DO NOT EDIT!


#ifndef MONITOR_MSGS_MESSAGE_FAULT_VEC_H
#define MONITOR_MSGS_MESSAGE_FAULT_VEC_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <monitor_msgs/fault_info.h>

namespace monitor_msgs
{
template <class ContainerAllocator>
struct fault_vec_
{
  typedef fault_vec_<ContainerAllocator> Type;

  fault_vec_()
    : info_vec()
    , module_fault_level(0)  {
    }
  fault_vec_(const ContainerAllocator& _alloc)
    : info_vec(_alloc)
    , module_fault_level(0)  {
  (void)_alloc;
    }



   typedef std::vector< ::monitor_msgs::fault_info_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::monitor_msgs::fault_info_<ContainerAllocator> >> _info_vec_type;
  _info_vec_type info_vec;

   typedef int32_t _module_fault_level_type;
  _module_fault_level_type module_fault_level;





  typedef boost::shared_ptr< ::monitor_msgs::fault_vec_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::monitor_msgs::fault_vec_<ContainerAllocator> const> ConstPtr;

}; // struct fault_vec_

typedef ::monitor_msgs::fault_vec_<std::allocator<void> > fault_vec;

typedef boost::shared_ptr< ::monitor_msgs::fault_vec > fault_vecPtr;
typedef boost::shared_ptr< ::monitor_msgs::fault_vec const> fault_vecConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::monitor_msgs::fault_vec_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::monitor_msgs::fault_vec_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::monitor_msgs::fault_vec_<ContainerAllocator1> & lhs, const ::monitor_msgs::fault_vec_<ContainerAllocator2> & rhs)
{
  return lhs.info_vec == rhs.info_vec &&
    lhs.module_fault_level == rhs.module_fault_level;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::monitor_msgs::fault_vec_<ContainerAllocator1> & lhs, const ::monitor_msgs::fault_vec_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace monitor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::monitor_msgs::fault_vec_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::monitor_msgs::fault_vec_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::monitor_msgs::fault_vec_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::monitor_msgs::fault_vec_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::monitor_msgs::fault_vec_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::monitor_msgs::fault_vec_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::monitor_msgs::fault_vec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3a902bc29c84dd13ce2fe6eb10733ead";
  }

  static const char* value(const ::monitor_msgs::fault_vec_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3a902bc29c84dd13ULL;
  static const uint64_t static_value2 = 0xce2fe6eb10733eadULL;
};

template<class ContainerAllocator>
struct DataType< ::monitor_msgs::fault_vec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "monitor_msgs/fault_vec";
  }

  static const char* value(const ::monitor_msgs::fault_vec_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::monitor_msgs::fault_vec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "monitor_msgs/fault_info[]  info_vec\n"
"int32   module_fault_level\n"
"================================================================================\n"
"MSG: monitor_msgs/fault_info\n"
"float64 timestamp_sec   ##故障发生时间\n"
"string  module_name		##故障模块或节点名称\n"
"int32   sequence_num	##消息数\n"
"int32   version			##版本号\n"
"int32   error_code		##故障码\n"
"int32   fault_level		##故障等级\n"
"string  msg				##故障描述\n"
;
  }

  static const char* value(const ::monitor_msgs::fault_vec_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::monitor_msgs::fault_vec_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.info_vec);
      stream.next(m.module_fault_level);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct fault_vec_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::monitor_msgs::fault_vec_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::monitor_msgs::fault_vec_<ContainerAllocator>& v)
  {
    s << indent << "info_vec[]" << std::endl;
    for (size_t i = 0; i < v.info_vec.size(); ++i)
    {
      s << indent << "  info_vec[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::monitor_msgs::fault_info_<ContainerAllocator> >::stream(s, indent + "    ", v.info_vec[i]);
    }
    s << indent << "module_fault_level: ";
    Printer<int32_t>::stream(s, indent + "  ", v.module_fault_level);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MONITOR_MSGS_MESSAGE_FAULT_VEC_H
